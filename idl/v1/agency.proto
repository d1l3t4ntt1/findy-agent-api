// Copyright 2020 Harri @ OP Techlab.
//

syntax = "proto3";

import "protocol.proto";

option go_package = "github.com/findy-network/findy-common-go/grpc/ops/v1";

package ops.v1;

/*
AgencyService offers for agency level functionality i.e. multi-tenant features
like data migrations, etc.
 */
service AgencyService {
  // PSMHook listens realtime stream of archived protocol state machines
  rpc PSMHook(DataHook) returns (stream AgencyStatus) {}

  // Onboard allocates cloud agent and its wallet from Agency
  rpc Onboard(Onboarding) returns (OnboardResult) {}
}

// Onboarding is structure for cloud agent (CA) onboarding.
message Onboarding {
  string email = 1; // email is then name or handle used for pointing the CA.
}

// OnboardResult is structure to transport Onboarding result.
message OnboardResult {
  bool ok = 1; // result if Onboarding was successful.
  message OKResult {
    string JWT = 1; // pregenerated JWT token, mostly usefull for development.
    string CADID = 2; // Cloud Agent DID. The UID for CA.
    string invitation_json = 3; // pregenerated Invitation, mostly in dev use.
  }
  OKResult result = 2; // Instance of the OK result.
}

/*
AgencyStatus is message returned by PSMHook. These status messages encapsulates
protocol state machine information. The message has its own id. The protocol
specific information comes in ProtocolStatus. Outside of the actual protocol but
relevant information are current agent DID and Connection ID which arrives in
own fields.
 */
message AgencyStatus {
  string ID = 1;
  agency.v1.ProtocolStatus protocol_status = 2; // Detailed protocol information
  string DID = 3; // Agent DID if available
  string connectionID = 4; // Connection (pairwise) ID if available
}

// DataHook is structure identify data hook.
message DataHook {
  string ID = 1; // UUID to uniquely identify the hook
}

// DevOpsService is Cmd-based interface to run DevOps cmds in agency.
service DevOpsService {
  // Enter is the cmd exec interface.
  rpc Enter(Cmd) returns (CmdReturn) {}
}

// Cmd is structure to transport agency cmds.
message Cmd {
  enum Type {
    PING = 0;
    LOGGING = 1;
    COUNT = 2;
  }
  Type type = 1;
  // Request is the structure to gather cmd specific arguments to type fields.
  oneof Request {
    string logging = 2; // Type is LOGGING includes argument string.
  }
}

// CmdReturn is structure to return cmd results.
message CmdReturn {
  Cmd.Type type = 1;
  oneof Response {
    string ping = 2; // Ping cmd's result.
    string count = 3; // Count cmd's result.
  }
}
