// Copyright 2020 Harri @ OP Techlab.
//

syntax = "proto3";

import "protocol.proto";

option go_package = "github.com/findy-network/findy-agent-api/grpc/agency/v1";

package agency.v1;

/*
AgentService is to communicate with your cloud agent. With the cloud agent
you can Listen your agent's status, Answer to its requests and questions,
create invitations, manage its running environment, and create schemas and
credentials.
 */
service AgentService {
  // Listen is bidirectional function to stream AgentStatus. ClientID must be
  // unique.
  rpc Listen(ClientID) returns (stream AgentStatus) {}

  // Wait is bidirectional function to stream service agent Questions.
  rpc Wait(ClientID) returns (stream Question) {}
  // Give is function to give answer to ACTION_NEEDED_xx notifications.
  rpc Give(Answer) returns (ClientID) {}

  // CreateInvitation returns an invitation according to InvitationBase.
  rpc CreateInvitation(InvitationBase) returns (Invitation) {}

  // SetImplId sets implementation ID for the clould agent. It should be "grpc".
  // TODO: REMOVE!! Check Agency implementation first.
  rpc SetImplId(SAImplementation) returns (SAImplementation) {}

  rpc Ping(PingMsg) returns (PingMsg) {}

  rpc CreateSchema(SchemaCreate) returns (Schema) {}
  rpc CreateCredDef(CredDefCreate) returns (CredDef) {}

  rpc GetSchema(Schema) returns (SchemaData) {}
  rpc GetCredDef(CredDef) returns (CredDefData) {}
}

message SchemaData {
  string ID = 1;
  string data = 2;
}

message CredDefData {
  string ID = 1;
  string data = 2;
}

message SchemaCreate {
  string name = 1;
  string version = 2;
  repeated string attributes = 3;
}

message Schema {
  string ID = 1;
}

message CredDefCreate {
  string schemaID = 1;
  string tag = 2;
}

message CredDef {
  string ID = 1;
}

message PingMsg {
  int32 ID = 1;
  bool ping_controller = 2;
}

message SAImplementation {
  string ID = 1;
  string endpoint = 2;
  string key = 3;
  bool persistent = 4;
}

message InvitationBase {
  string label = 1;
  string ID = 2;
  int64 expiration = 3; // not implemented yet
}

message Invitation {
  string json_str = 1;
  string url = 2; // not implemented yet
}

/*
Answer is a message send by Give function of Agent service.
 */
message Answer {
  string ID = 1; // Same as Notification ID (UUID)
  ClientID clientID = 2; // Same as your ClientID when Listening was started
  bool ack = 3; // Your response to the protocol question
  string info = 4; // General info, mostly used for debugging
}

// ClientID is UUID. If user has many different client device connected to
// cloud agent it must identify who is talking to.
message ClientID {
  string ID = 1; // UUID of the client
}

/*
AgentStatus is a message identifying current agent events returned as
notifications.
 */
message AgentStatus {
  ClientID clientID = 1; // UUID of the client listening
  Notification notification = 3; // The actual Notification message
}

/*
Notification is a message used to tell meaningful events outside from cloud
agent.
 */
message Notification {
  // Type is enum type to tell what happening
  enum Type {
    STATUS_UPDATE = 0; // General status update where no action needed
    ACTION_NEEDED = 1; // General action needed update notification
    ANSWER_NEEDED_PING = 2; // Your CA controller has been pinged
    ANSWER_NEEDED_ISSUE_PROPOSE = 3; // Issuing is proposed
    ANSWER_NEEDED_PROOF_PROPOSE = 4; // Proof is proposed
    ANSWER_NEEDED_PROOF_VERIFY = 5; // During proof values need to be verified
    KEEPALIVE = 6; // To prevent network idle to shut us down 
  }
  Type typeID = 1; // Notification type, see Type

  string ID = 2; // Notification's unique ID
  string connectionID = 3; // Current pairwise ID between agents
  string protocolID = 4; // Current protocol ID, see Aries Thread ID
  string protocol_family = 5; // Text version of the protocol family/namespace
  int64 timestamp = 6; // timestamp in nano because this is part of the key TODO check!!!
  Protocol.Type protocol_type = 7;
  Protocol.Role role = 8;
  string PID = 9;

  message IssueProposeMsg {
    string cred_defID = 2;
    string values_json = 3;
  }
  message ProofVerifyMsg {
    message Attribute {
      string value = 1;
      string name = 2;
      string cred_defID = 3;
    }
    repeated Attribute attributes = 1;
  }
  oneof Question {
    IssueProposeMsg issue_propose = 11;
    ProofVerifyMsg proof_verify = 12;
  }
}
