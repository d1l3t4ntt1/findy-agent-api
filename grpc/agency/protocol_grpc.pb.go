// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DIDCommClient is the client API for DIDComm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DIDCommClient interface {
	// Run is async function to start a protocol and return a stream to listen to
	// its progress.
	Run(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (DIDComm_RunClient, error)
	// Start asks the agency to start a protocol. It immediately returns a
	// protocol id that allows to monitor protocol with the Status function. If
	// Agent service's Listen is in use, we get a notification when protocol is
	// ready.
	Start(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*ProtocolID, error)
	// Status returns a current ProtocolStatus. ProtocolStatus is under
	// construction TODO
	Status(ctx context.Context, in *ProtocolID, opts ...grpc.CallOption) (*ProtocolStatus, error)
	// Unpause tells the protocol state machine how to proceed when it's waiting
	// user action.
	Unpause(ctx context.Context, in *ProtocolState, opts ...grpc.CallOption) (*ProtocolID, error)
	// Release releases the protocol state machine from agency. It can be called
	// only when protocol is in Ready state. After release you can access the
	// status information with the others services of your system.
	Release(ctx context.Context, in *ProtocolID, opts ...grpc.CallOption) (*ProtocolState, error)
}

type dIDCommClient struct {
	cc grpc.ClientConnInterface
}

func NewDIDCommClient(cc grpc.ClientConnInterface) DIDCommClient {
	return &dIDCommClient{cc}
}

func (c *dIDCommClient) Run(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (DIDComm_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DIDComm_serviceDesc.Streams[0], "/agency.DIDComm/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &dIDCommRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DIDComm_RunClient interface {
	Recv() (*ProtocolState, error)
	grpc.ClientStream
}

type dIDCommRunClient struct {
	grpc.ClientStream
}

func (x *dIDCommRunClient) Recv() (*ProtocolState, error) {
	m := new(ProtocolState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dIDCommClient) Start(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*ProtocolID, error) {
	out := new(ProtocolID)
	err := c.cc.Invoke(ctx, "/agency.DIDComm/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDCommClient) Status(ctx context.Context, in *ProtocolID, opts ...grpc.CallOption) (*ProtocolStatus, error) {
	out := new(ProtocolStatus)
	err := c.cc.Invoke(ctx, "/agency.DIDComm/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDCommClient) Unpause(ctx context.Context, in *ProtocolState, opts ...grpc.CallOption) (*ProtocolID, error) {
	out := new(ProtocolID)
	err := c.cc.Invoke(ctx, "/agency.DIDComm/Unpause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDCommClient) Release(ctx context.Context, in *ProtocolID, opts ...grpc.CallOption) (*ProtocolState, error) {
	out := new(ProtocolState)
	err := c.cc.Invoke(ctx, "/agency.DIDComm/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DIDCommServer is the server API for DIDComm service.
// All implementations must embed UnimplementedDIDCommServer
// for forward compatibility
type DIDCommServer interface {
	// Run is async function to start a protocol and return a stream to listen to
	// its progress.
	Run(*Protocol, DIDComm_RunServer) error
	// Start asks the agency to start a protocol. It immediately returns a
	// protocol id that allows to monitor protocol with the Status function. If
	// Agent service's Listen is in use, we get a notification when protocol is
	// ready.
	Start(context.Context, *Protocol) (*ProtocolID, error)
	// Status returns a current ProtocolStatus. ProtocolStatus is under
	// construction TODO
	Status(context.Context, *ProtocolID) (*ProtocolStatus, error)
	// Unpause tells the protocol state machine how to proceed when it's waiting
	// user action.
	Unpause(context.Context, *ProtocolState) (*ProtocolID, error)
	// Release releases the protocol state machine from agency. It can be called
	// only when protocol is in Ready state. After release you can access the
	// status information with the others services of your system.
	Release(context.Context, *ProtocolID) (*ProtocolState, error)
	mustEmbedUnimplementedDIDCommServer()
}

// UnimplementedDIDCommServer must be embedded to have forward compatible implementations.
type UnimplementedDIDCommServer struct {
}

func (UnimplementedDIDCommServer) Run(*Protocol, DIDComm_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedDIDCommServer) Start(context.Context, *Protocol) (*ProtocolID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedDIDCommServer) Status(context.Context, *ProtocolID) (*ProtocolStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDIDCommServer) Unpause(context.Context, *ProtocolState) (*ProtocolID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedDIDCommServer) Release(context.Context, *ProtocolID) (*ProtocolState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedDIDCommServer) mustEmbedUnimplementedDIDCommServer() {}

// UnsafeDIDCommServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DIDCommServer will
// result in compilation errors.
type UnsafeDIDCommServer interface {
	mustEmbedUnimplementedDIDCommServer()
}

func RegisterDIDCommServer(s *grpc.Server, srv DIDCommServer) {
	s.RegisterService(&_DIDComm_serviceDesc, srv)
}

func _DIDComm_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Protocol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DIDCommServer).Run(m, &dIDCommRunServer{stream})
}

type DIDComm_RunServer interface {
	Send(*ProtocolState) error
	grpc.ServerStream
}

type dIDCommRunServer struct {
	grpc.ServerStream
}

func (x *dIDCommRunServer) Send(m *ProtocolState) error {
	return x.ServerStream.SendMsg(m)
}

func _DIDComm_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Protocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDCommServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.DIDComm/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDCommServer).Start(ctx, req.(*Protocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDComm_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDCommServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.DIDComm/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDCommServer).Status(ctx, req.(*ProtocolID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDComm_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDCommServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.DIDComm/Unpause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDCommServer).Unpause(ctx, req.(*ProtocolState))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDComm_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDCommServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.DIDComm/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDCommServer).Release(ctx, req.(*ProtocolID))
	}
	return interceptor(ctx, in, info, handler)
}

var _DIDComm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agency.DIDComm",
	HandlerType: (*DIDCommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _DIDComm_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DIDComm_Status_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _DIDComm_Unpause_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _DIDComm_Release_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _DIDComm_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
