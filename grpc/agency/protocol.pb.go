// Copyright 2020 Harri @ OP Techlab.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: protocol.proto

package agency

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is enum type to identify the protocol, we aren't tight to Aries strings
type Protocol_Type int32

const (
	Protocol_CONNECT       Protocol_Type = 0
	Protocol_ISSUE         Protocol_Type = 1
	Protocol_PROOF         Protocol_Type = 2
	Protocol_TRUST_PING    Protocol_Type = 3
	Protocol_BASIC_MESSAGE Protocol_Type = 4
)

// Enum value maps for Protocol_Type.
var (
	Protocol_Type_name = map[int32]string{
		0: "CONNECT",
		1: "ISSUE",
		2: "PROOF",
		3: "TRUST_PING",
		4: "BASIC_MESSAGE",
	}
	Protocol_Type_value = map[string]int32{
		"CONNECT":       0,
		"ISSUE":         1,
		"PROOF":         2,
		"TRUST_PING":    3,
		"BASIC_MESSAGE": 4,
	}
)

func (x Protocol_Type) Enum() *Protocol_Type {
	p := new(Protocol_Type)
	*p = x
	return p
}

func (x Protocol_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (Protocol_Type) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x Protocol_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_Type.Descriptor instead.
func (Protocol_Type) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 0}
}

type Protocol_Role int32

const (
	Protocol_UNKNOWN   Protocol_Role = 0
	Protocol_INITIATOR Protocol_Role = 1
	Protocol_ADDRESSEE Protocol_Role = 2
	Protocol_RESUME    Protocol_Role = 3 // todo: check if we need another role for this as well
)

// Enum value maps for Protocol_Role.
var (
	Protocol_Role_name = map[int32]string{
		0: "UNKNOWN",
		1: "INITIATOR",
		2: "ADDRESSEE",
		3: "RESUME",
	}
	Protocol_Role_value = map[string]int32{
		"UNKNOWN":   0,
		"INITIATOR": 1,
		"ADDRESSEE": 2,
		"RESUME":    3,
	}
)

func (x Protocol_Role) Enum() *Protocol_Role {
	p := new(Protocol_Role)
	*p = x
	return p
}

func (x Protocol_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (Protocol_Role) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x Protocol_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_Role.Descriptor instead.
func (Protocol_Role) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 1}
}

type ProtocolState_State int32

const (
	ProtocolState_OK          ProtocolState_State = 0 // Protocol is finalized successfully
	ProtocolState_ERR         ProtocolState_State = 1 // Protocol is finalized with error or other side NACK
	ProtocolState_WAIT_ACTION ProtocolState_State = 2 // Protocol is waiting user's action to continue
	ProtocolState_ACK         ProtocolState_State = 3 // User tells for the protocol to proceed
	ProtocolState_NACK        ProtocolState_State = 4 // User tells for the protocol not to proceed
)

// Enum value maps for ProtocolState_State.
var (
	ProtocolState_State_name = map[int32]string{
		0: "OK",
		1: "ERR",
		2: "WAIT_ACTION",
		3: "ACK",
		4: "NACK",
	}
	ProtocolState_State_value = map[string]int32{
		"OK":          0,
		"ERR":         1,
		"WAIT_ACTION": 2,
		"ACK":         3,
		"NACK":        4,
	}
)

func (x ProtocolState_State) Enum() *ProtocolState_State {
	p := new(ProtocolState_State)
	*p = x
	return p
}

func (x ProtocolState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (ProtocolState_State) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x ProtocolState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolState_State.Descriptor instead.
func (ProtocolState_State) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2, 0}
}

//
//Protocol is the actual DIDComm/Aries protocol.
type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId       Protocol_Type `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,enum=agency.Protocol_Type" json:"type_id,omitempty"` // Protocol type
	Role         Protocol_Role `protobuf:"varint,2,opt,name=role,proto3,enum=agency.Protocol_Role" json:"role,omitempty"`
	PrevThreadId string        `protobuf:"bytes,3,opt,name=prev_thread_id,json=prevThreadId,proto3" json:"prev_thread_id,omitempty"` // Previous protocol ID if there was any
	ConnectionId string        `protobuf:"bytes,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`   // pairwise ID, this only empty when Type is CONNECT
	// Protocol type specific data: one of or no one
	//
	// Types that are assignable to StartMsg:
	//	*Protocol_InvitationJson
	//	*Protocol_CredDef
	//	*Protocol_ProofAttributesJson
	//	*Protocol_BasicMessage
	StartMsg isProtocol_StartMsg `protobuf_oneof:"StartMsg"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Protocol) GetTypeId() Protocol_Type {
	if x != nil {
		return x.TypeId
	}
	return Protocol_CONNECT
}

func (x *Protocol) GetRole() Protocol_Role {
	if x != nil {
		return x.Role
	}
	return Protocol_UNKNOWN
}

func (x *Protocol) GetPrevThreadId() string {
	if x != nil {
		return x.PrevThreadId
	}
	return ""
}

func (x *Protocol) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (m *Protocol) GetStartMsg() isProtocol_StartMsg {
	if m != nil {
		return m.StartMsg
	}
	return nil
}

func (x *Protocol) GetInvitationJson() string {
	if x, ok := x.GetStartMsg().(*Protocol_InvitationJson); ok {
		return x.InvitationJson
	}
	return ""
}

func (x *Protocol) GetCredDef() *Protocol_Issuing {
	if x, ok := x.GetStartMsg().(*Protocol_CredDef); ok {
		return x.CredDef
	}
	return nil
}

func (x *Protocol) GetProofAttributesJson() string {
	if x, ok := x.GetStartMsg().(*Protocol_ProofAttributesJson); ok {
		return x.ProofAttributesJson
	}
	return ""
}

func (x *Protocol) GetBasicMessage() string {
	if x, ok := x.GetStartMsg().(*Protocol_BasicMessage); ok {
		return x.BasicMessage
	}
	return ""
}

type isProtocol_StartMsg interface {
	isProtocol_StartMsg()
}

type Protocol_InvitationJson struct {
	InvitationJson string `protobuf:"bytes,10,opt,name=invitation_json,json=invitationJson,proto3,oneof"` // Invitation JSON string, only for CONNECT
}

type Protocol_CredDef struct {
	CredDef *Protocol_Issuing `protobuf:"bytes,11,opt,name=cred_def,json=credDef,proto3,oneof"` // Only for Issuing protocol
}

type Protocol_ProofAttributesJson struct {
	ProofAttributesJson string `protobuf:"bytes,12,opt,name=proof_attributes_json,json=proofAttributesJson,proto3,oneof"` // Only for Proof protocol
}

type Protocol_BasicMessage struct {
	BasicMessage string `protobuf:"bytes,13,opt,name=basic_message,json=basicMessage,proto3,oneof"`
}

func (*Protocol_InvitationJson) isProtocol_StartMsg() {}

func (*Protocol_CredDef) isProtocol_StartMsg() {}

func (*Protocol_ProofAttributesJson) isProtocol_StartMsg() {}

func (*Protocol_BasicMessage) isProtocol_StartMsg() {}

//
//ProtocolID is a primary minimal identification of the _current_ protocol
//conversation. Protocol is an elementary concept in SSI. With the protocols we
//build the trust over the state of the connection (aka pairwise). That's why the
//connection ID is always the most important thing and we should drive towards
//reuse of the previous connection when ever it's possible. Still, we operate with
//protocols.
type ProtocolID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId Protocol_Type `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,enum=agency.Protocol_Type" json:"type_id,omitempty"` // i.e. what is going on
	Role   Protocol_Role `protobuf:"varint,2,opt,name=role,proto3,enum=agency.Protocol_Role" json:"role,omitempty"`                   // i.e. did we start this or other end etc.
	Id     string        `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                  // UUID of the current protocol, note! not the same as conn-id
}

func (x *ProtocolID) Reset() {
	*x = ProtocolID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolID) ProtoMessage() {}

func (x *ProtocolID) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolID.ProtoReflect.Descriptor instead.
func (*ProtocolID) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolID) GetTypeId() Protocol_Type {
	if x != nil {
		return x.TypeId
	}
	return Protocol_CONNECT
}

func (x *ProtocolID) GetRole() Protocol_Role {
	if x != nil {
		return x.Role
	}
	return Protocol_UNKNOWN
}

func (x *ProtocolID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ProtocolState is lightest and simplest way to tell outside what is going on
// during a protocol run.
type ProtocolState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolId *ProtocolID         `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	State      ProtocolState_State `protobuf:"varint,2,opt,name=state,proto3,enum=agency.ProtocolState_State" json:"state,omitempty"` // See the State enum, tells whats going on
	Info       string              `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`                                    // Extra information, mostly used for debugging
}

func (x *ProtocolState) Reset() {
	*x = ProtocolState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolState) ProtoMessage() {}

func (x *ProtocolState) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolState.ProtoReflect.Descriptor instead.
func (*ProtocolState) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *ProtocolState) GetProtocolId() *ProtocolID {
	if x != nil {
		return x.ProtocolId
	}
	return nil
}

func (x *ProtocolState) GetState() ProtocolState_State {
	if x != nil {
		return x.State
	}
	return ProtocolState_OK
}

func (x *ProtocolState) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

//
//ProtocolStatus is message to include whole status of the protocol.
//Todo: should we think about Aries thread and decorator structure as well? e.g.
//BasicMsg
type ProtocolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      *ProtocolState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Timestamp  int64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StatusJson string         `protobuf:"bytes,3,opt,name=status_json,json=statusJson,proto3" json:"status_json,omitempty"`
	// Types that are assignable to Status:
	//	*ProtocolStatus_Connection_
	//	*ProtocolStatus_Issue_
	//	*ProtocolStatus_Proof_
	//	*ProtocolStatus_TrustPing_
	//	*ProtocolStatus_BasicMessage_
	Status isProtocolStatus_Status `protobuf_oneof:"Status"`
}

func (x *ProtocolStatus) Reset() {
	*x = ProtocolStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus) ProtoMessage() {}

func (x *ProtocolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus.ProtoReflect.Descriptor instead.
func (*ProtocolStatus) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *ProtocolStatus) GetState() *ProtocolState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ProtocolStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProtocolStatus) GetStatusJson() string {
	if x != nil {
		return x.StatusJson
	}
	return ""
}

func (m *ProtocolStatus) GetStatus() isProtocolStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *ProtocolStatus) GetConnection() *ProtocolStatus_Connection {
	if x, ok := x.GetStatus().(*ProtocolStatus_Connection_); ok {
		return x.Connection
	}
	return nil
}

func (x *ProtocolStatus) GetIssue() *ProtocolStatus_Issue {
	if x, ok := x.GetStatus().(*ProtocolStatus_Issue_); ok {
		return x.Issue
	}
	return nil
}

func (x *ProtocolStatus) GetProof() *ProtocolStatus_Proof {
	if x, ok := x.GetStatus().(*ProtocolStatus_Proof_); ok {
		return x.Proof
	}
	return nil
}

func (x *ProtocolStatus) GetTrustPing() *ProtocolStatus_TrustPing {
	if x, ok := x.GetStatus().(*ProtocolStatus_TrustPing_); ok {
		return x.TrustPing
	}
	return nil
}

func (x *ProtocolStatus) GetBasicMessage() *ProtocolStatus_BasicMessage {
	if x, ok := x.GetStatus().(*ProtocolStatus_BasicMessage_); ok {
		return x.BasicMessage
	}
	return nil
}

type isProtocolStatus_Status interface {
	isProtocolStatus_Status()
}

type ProtocolStatus_Connection_ struct {
	Connection *ProtocolStatus_Connection `protobuf:"bytes,10,opt,name=connection,proto3,oneof"`
}

type ProtocolStatus_Issue_ struct {
	Issue *ProtocolStatus_Issue `protobuf:"bytes,11,opt,name=issue,proto3,oneof"`
}

type ProtocolStatus_Proof_ struct {
	Proof *ProtocolStatus_Proof `protobuf:"bytes,12,opt,name=proof,proto3,oneof"`
}

type ProtocolStatus_TrustPing_ struct {
	TrustPing *ProtocolStatus_TrustPing `protobuf:"bytes,13,opt,name=trust_ping,json=trustPing,proto3,oneof"`
}

type ProtocolStatus_BasicMessage_ struct {
	BasicMessage *ProtocolStatus_BasicMessage `protobuf:"bytes,14,opt,name=basic_message,json=basicMessage,proto3,oneof"`
}

func (*ProtocolStatus_Connection_) isProtocolStatus_Status() {}

func (*ProtocolStatus_Issue_) isProtocolStatus_Status() {}

func (*ProtocolStatus_Proof_) isProtocolStatus_Status() {}

func (*ProtocolStatus_TrustPing_) isProtocolStatus_Status() {}

func (*ProtocolStatus_BasicMessage_) isProtocolStatus_Status() {}

type Protocol_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Protocol_Attribute) Reset() {
	*x = Protocol_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Attribute) ProtoMessage() {}

func (x *Protocol_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Attribute.ProtoReflect.Descriptor instead.
func (*Protocol_Attribute) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Protocol_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protocol_Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Protocol_Attrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs []*Protocol_Attribute `protobuf:"bytes,1,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *Protocol_Attrs) Reset() {
	*x = Protocol_Attrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Attrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Attrs) ProtoMessage() {}

func (x *Protocol_Attrs) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Attrs.ProtoReflect.Descriptor instead.
func (*Protocol_Attrs) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Protocol_Attrs) GetAttrs() []*Protocol_Attribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// Issuing attributes
type Protocol_Issuing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredDefId string `protobuf:"bytes,1,opt,name=cred_def_id,json=credDefId,proto3" json:"cred_def_id,omitempty"`
	// Types that are assignable to Attrs:
	//	*Protocol_Issuing_AttributesJson
	//	*Protocol_Issuing_Attrs_
	Attrs isProtocol_Issuing_Attrs `protobuf_oneof:"Attrs"`
}

func (x *Protocol_Issuing) Reset() {
	*x = Protocol_Issuing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Issuing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Issuing) ProtoMessage() {}

func (x *Protocol_Issuing) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Issuing.ProtoReflect.Descriptor instead.
func (*Protocol_Issuing) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Protocol_Issuing) GetCredDefId() string {
	if x != nil {
		return x.CredDefId
	}
	return ""
}

func (m *Protocol_Issuing) GetAttrs() isProtocol_Issuing_Attrs {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (x *Protocol_Issuing) GetAttributesJson() string {
	if x, ok := x.GetAttrs().(*Protocol_Issuing_AttributesJson); ok {
		return x.AttributesJson
	}
	return ""
}

func (x *Protocol_Issuing) GetAttrs_() *Protocol_Attrs {
	if x, ok := x.GetAttrs().(*Protocol_Issuing_Attrs_); ok {
		return x.Attrs_
	}
	return nil
}

type isProtocol_Issuing_Attrs interface {
	isProtocol_Issuing_Attrs()
}

type Protocol_Issuing_AttributesJson struct {
	AttributesJson string `protobuf:"bytes,2,opt,name=attributes_json,json=attributesJson,proto3,oneof"`
}

type Protocol_Issuing_Attrs_ struct {
	Attrs_ *Protocol_Attrs `protobuf:"bytes,3,opt,name=attrs,proto3,oneof"`
}

func (*Protocol_Issuing_AttributesJson) isProtocol_Issuing_Attrs() {}

func (*Protocol_Issuing_Attrs_) isProtocol_Issuing_Attrs() {}

type ProtocolStatus_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MyDid         string `protobuf:"bytes,2,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	TheirDid      string `protobuf:"bytes,3,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	TheirEndpoint string `protobuf:"bytes,4,opt,name=their_endpoint,json=theirEndpoint,proto3" json:"their_endpoint,omitempty"`
	TheirLabel    string `protobuf:"bytes,5,opt,name=their_label,json=theirLabel,proto3" json:"their_label,omitempty"`
}

func (x *ProtocolStatus_Connection) Reset() {
	*x = ProtocolStatus_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Connection) ProtoMessage() {}

func (x *ProtocolStatus_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Connection.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Connection) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ProtocolStatus_Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetTheirEndpoint() string {
	if x != nil {
		return x.TheirEndpoint
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetTheirLabel() string {
	if x != nil {
		return x.TheirLabel
	}
	return ""
}

type ProtocolStatus_Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredDefId string                           `protobuf:"bytes,1,opt,name=cred_def_id,json=credDefId,proto3" json:"cred_def_id,omitempty"`
	SchemaId  string                           `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Attrs     []*ProtocolStatus_Issue_CredAttr `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *ProtocolStatus_Issue) Reset() {
	*x = ProtocolStatus_Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Issue) ProtoMessage() {}

func (x *ProtocolStatus_Issue) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Issue.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Issue) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ProtocolStatus_Issue) GetCredDefId() string {
	if x != nil {
		return x.CredDefId
	}
	return ""
}

func (x *ProtocolStatus_Issue) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *ProtocolStatus_Issue) GetAttrs() []*ProtocolStatus_Issue_CredAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type ProtocolStatus_Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs []*ProtocolStatus_Proof_Attr `protobuf:"bytes,1,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *ProtocolStatus_Proof) Reset() {
	*x = ProtocolStatus_Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Proof) ProtoMessage() {}

func (x *ProtocolStatus_Proof) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Proof.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Proof) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ProtocolStatus_Proof) GetAttrs() []*ProtocolStatus_Proof_Attr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type ProtocolStatus_TrustPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replied bool `protobuf:"varint,1,opt,name=replied,proto3" json:"replied,omitempty"`
}

func (x *ProtocolStatus_TrustPing) Reset() {
	*x = ProtocolStatus_TrustPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_TrustPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_TrustPing) ProtoMessage() {}

func (x *ProtocolStatus_TrustPing) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_TrustPing.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_TrustPing) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 3}
}

func (x *ProtocolStatus_TrustPing) GetReplied() bool {
	if x != nil {
		return x.Replied
	}
	return false
}

type ProtocolStatus_BasicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content       string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	SentByMe      bool   `protobuf:"varint,2,opt,name=sent_by_me,json=sentByMe,proto3" json:"sent_by_me,omitempty"`
	Delivered     bool   `protobuf:"varint,3,opt,name=delivered,proto3" json:"delivered,omitempty"`
	SentTimestamp int64  `protobuf:"varint,4,opt,name=sent_timestamp,json=sentTimestamp,proto3" json:"sent_timestamp,omitempty"`
}

func (x *ProtocolStatus_BasicMessage) Reset() {
	*x = ProtocolStatus_BasicMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_BasicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_BasicMessage) ProtoMessage() {}

func (x *ProtocolStatus_BasicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_BasicMessage.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_BasicMessage) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 4}
}

func (x *ProtocolStatus_BasicMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProtocolStatus_BasicMessage) GetSentByMe() bool {
	if x != nil {
		return x.SentByMe
	}
	return false
}

func (x *ProtocolStatus_BasicMessage) GetDelivered() bool {
	if x != nil {
		return x.Delivered
	}
	return false
}

func (x *ProtocolStatus_BasicMessage) GetSentTimestamp() int64 {
	if x != nil {
		return x.SentTimestamp
	}
	return 0
}

type ProtocolStatus_Issue_CredAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProtocolStatus_Issue_CredAttr) Reset() {
	*x = ProtocolStatus_Issue_CredAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Issue_CredAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Issue_CredAttr) ProtoMessage() {}

func (x *ProtocolStatus_Issue_CredAttr) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Issue_CredAttr.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Issue_CredAttr) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (x *ProtocolStatus_Issue_CredAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolStatus_Issue_CredAttr) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ProtocolStatus_Proof_Attr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CredDefId string `protobuf:"bytes,2,opt,name=cred_def_id,json=credDefId,proto3" json:"cred_def_id,omitempty"`
	Predicate string `protobuf:"bytes,3,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *ProtocolStatus_Proof_Attr) Reset() {
	*x = ProtocolStatus_Proof_Attr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Proof_Attr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Proof_Attr) ProtoMessage() {}

func (x *ProtocolStatus_Proof_Attr) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Proof_Attr.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Proof_Attr) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *ProtocolStatus_Proof_Attr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolStatus_Proof_Attr) GetCredDefId() string {
	if x != nil {
		return x.CredDefId
	}
	return ""
}

func (x *ProtocolStatus_Proof_Attr) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8a, 0x06, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x12, 0x34, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x35, 0x0a, 0x09, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x39, 0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x8d, 0x01, 0x0a,
	0x07, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x55, 0x53, 0x54,
	0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04, 0x22, 0x3d, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x77, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc9,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x52, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x22, 0xed, 0x08, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x98, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x64,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x79, 0x44, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x69, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x1a, 0xb7, 0x01, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x34, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9a,
	0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x1a, 0x58, 0x0a, 0x04, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x25, 0x0a, 0x09, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x1a, 0x8b, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x92, 0x02, 0x0a, 0x07, 0x44,
	0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x32, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x10, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a,
	0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x15, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0x00, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x6e, 0x64, 0x79, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x66, 0x69, 0x6e, 0x64,
	0x79, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_protocol_proto_goTypes = []interface{}{
	(Protocol_Type)(0),                    // 0: agency.Protocol.Type
	(Protocol_Role)(0),                    // 1: agency.Protocol.Role
	(ProtocolState_State)(0),              // 2: agency.ProtocolState.State
	(*Protocol)(nil),                      // 3: agency.Protocol
	(*ProtocolID)(nil),                    // 4: agency.ProtocolID
	(*ProtocolState)(nil),                 // 5: agency.ProtocolState
	(*ProtocolStatus)(nil),                // 6: agency.ProtocolStatus
	(*Protocol_Attribute)(nil),            // 7: agency.Protocol.Attribute
	(*Protocol_Attrs)(nil),                // 8: agency.Protocol.Attrs
	(*Protocol_Issuing)(nil),              // 9: agency.Protocol.Issuing
	(*ProtocolStatus_Connection)(nil),     // 10: agency.ProtocolStatus.Connection
	(*ProtocolStatus_Issue)(nil),          // 11: agency.ProtocolStatus.Issue
	(*ProtocolStatus_Proof)(nil),          // 12: agency.ProtocolStatus.Proof
	(*ProtocolStatus_TrustPing)(nil),      // 13: agency.ProtocolStatus.TrustPing
	(*ProtocolStatus_BasicMessage)(nil),   // 14: agency.ProtocolStatus.BasicMessage
	(*ProtocolStatus_Issue_CredAttr)(nil), // 15: agency.ProtocolStatus.Issue.CredAttr
	(*ProtocolStatus_Proof_Attr)(nil),     // 16: agency.ProtocolStatus.Proof.Attr
}
var file_protocol_proto_depIdxs = []int32{
	0,  // 0: agency.Protocol.type_id:type_name -> agency.Protocol.Type
	1,  // 1: agency.Protocol.role:type_name -> agency.Protocol.Role
	9,  // 2: agency.Protocol.cred_def:type_name -> agency.Protocol.Issuing
	0,  // 3: agency.ProtocolID.type_id:type_name -> agency.Protocol.Type
	1,  // 4: agency.ProtocolID.role:type_name -> agency.Protocol.Role
	4,  // 5: agency.ProtocolState.protocol_id:type_name -> agency.ProtocolID
	2,  // 6: agency.ProtocolState.state:type_name -> agency.ProtocolState.State
	5,  // 7: agency.ProtocolStatus.state:type_name -> agency.ProtocolState
	10, // 8: agency.ProtocolStatus.connection:type_name -> agency.ProtocolStatus.Connection
	11, // 9: agency.ProtocolStatus.issue:type_name -> agency.ProtocolStatus.Issue
	12, // 10: agency.ProtocolStatus.proof:type_name -> agency.ProtocolStatus.Proof
	13, // 11: agency.ProtocolStatus.trust_ping:type_name -> agency.ProtocolStatus.TrustPing
	14, // 12: agency.ProtocolStatus.basic_message:type_name -> agency.ProtocolStatus.BasicMessage
	7,  // 13: agency.Protocol.Attrs.attrs:type_name -> agency.Protocol.Attribute
	8,  // 14: agency.Protocol.Issuing.attrs:type_name -> agency.Protocol.Attrs
	15, // 15: agency.ProtocolStatus.Issue.attrs:type_name -> agency.ProtocolStatus.Issue.CredAttr
	16, // 16: agency.ProtocolStatus.Proof.attrs:type_name -> agency.ProtocolStatus.Proof.Attr
	3,  // 17: agency.DIDComm.Run:input_type -> agency.Protocol
	3,  // 18: agency.DIDComm.Start:input_type -> agency.Protocol
	4,  // 19: agency.DIDComm.Status:input_type -> agency.ProtocolID
	5,  // 20: agency.DIDComm.Resume:input_type -> agency.ProtocolState
	4,  // 21: agency.DIDComm.Release:input_type -> agency.ProtocolID
	5,  // 22: agency.DIDComm.Run:output_type -> agency.ProtocolState
	4,  // 23: agency.DIDComm.Start:output_type -> agency.ProtocolID
	6,  // 24: agency.DIDComm.Status:output_type -> agency.ProtocolStatus
	4,  // 25: agency.DIDComm.Resume:output_type -> agency.ProtocolID
	4,  // 26: agency.DIDComm.Release:output_type -> agency.ProtocolID
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Attrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Issuing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_TrustPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_BasicMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Issue_CredAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Proof_Attr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Protocol_InvitationJson)(nil),
		(*Protocol_CredDef)(nil),
		(*Protocol_ProofAttributesJson)(nil),
		(*Protocol_BasicMessage)(nil),
	}
	file_protocol_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ProtocolStatus_Connection_)(nil),
		(*ProtocolStatus_Issue_)(nil),
		(*ProtocolStatus_Proof_)(nil),
		(*ProtocolStatus_TrustPing_)(nil),
		(*ProtocolStatus_BasicMessage_)(nil),
	}
	file_protocol_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Protocol_Issuing_AttributesJson)(nil),
		(*Protocol_Issuing_Attrs_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
